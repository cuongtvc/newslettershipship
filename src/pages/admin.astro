---
import Layout from '../layouts/Layout.astro';
import AdminLogin from '../components/AdminLogin.astro';

// Check authentication on server side
let isAuthenticated = false;

const cookieHeader = Astro.request.headers.get('cookie');
if (cookieHeader) {
  const cookies = new URLSearchParams(cookieHeader.replace(/; /g, '&'));
  const sessionToken = cookies.get('admin_session');
  
  if (sessionToken && (Astro.locals as any).runtime?.env?.NEWSLETTER_KV) {
    try {
      const sessionData = await (Astro.locals as any).runtime.env.NEWSLETTER_KV.get(`session:${sessionToken}`, 'json');
      if (sessionData) {
        const now = new Date();
        const expiresAt = new Date(sessionData.expiresAt);
        isAuthenticated = now <= expiresAt;
      }
    } catch (error) {
      console.error('Session check error:', error);
    }
  }
}
---

<Layout title="Newsletter Admin">
  <main>
    {!isAuthenticated ? (
      <AdminLogin />
    ) : (
      <div class="admin-container">
        <div class="admin-header">
          <h1>Newsletter Administration</h1>
          <button id="logout-btn" class="btn btn-secondary">Logout</button>
        </div>
        
        <div class="stats-card">
          <h2>Subscriber Statistics</h2>
          <div class="stat">
            <span class="stat-number" id="subscriber-count">-</span>
            <span class="stat-label">Total Subscribers</span>
          </div>
        </div>

        <div class="upload-card">
          <h2>Bulk Upload Subscribers</h2>
          <div class="upload-section">
            <div class="file-upload">
              <input type="file" id="csv-file" accept=".csv" />
              <label for="csv-file" class="upload-label">
                <span class="upload-text">Choose CSV file or drag & drop</span>
                <span class="upload-hint">CSV should contain one email per line</span>
              </label>
            </div>
            <button id="upload-btn" class="btn btn-primary" disabled>Upload Subscribers</button>
          </div>
          <div id="upload-progress" class="hidden">
            <div class="progress-bar">
              <div id="progress-fill" class="progress-fill"></div>
            </div>
            <div id="upload-status">Processing...</div>
          </div>
          <div id="upload-results" class="hidden">
            <h3>Upload Results</h3>
            <div class="results-summary">
              <div class="result-item">
                <span class="result-number" id="added-count">0</span>
                <span class="result-label">New subscribers added</span>
              </div>
              <div class="result-item">
                <span class="result-number" id="skipped-count">0</span>
                <span class="result-label">Existing emails skipped</span>
              </div>
              <div class="result-item">
                <span class="result-number" id="invalid-count">0</span>
                <span class="result-label">Invalid emails</span>
              </div>
            </div>
            <div id="error-list" class="error-list hidden">
              <h4>Errors:</h4>
              <ul id="error-items"></ul>
            </div>
          </div>
        </div>

        <div class="subscribers-card">
          <h2>All Subscribers</h2>
          <div id="loading">Loading subscribers...</div>
          <div id="subscribers-list" class="hidden">
            <div class="pagination-info">
              <span id="pagination-info-text"></span>
            </div>
            <table>
              <thead>
                <tr>
                  <th>Email</th>
                  <th>Subscribed Date</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="subscribers-tbody">
              </tbody>
            </table>
            <div class="pagination-controls">
              <button id="prev-page" class="btn btn-secondary" disabled>Previous</button>
              <span id="page-info">Page 1 of 1</span>
              <button id="next-page" class="btn btn-secondary" disabled>Next</button>
            </div>
          </div>
          <div id="error" class="error hidden"></div>
        </div>
      </div>
    )}
  </main>
</Layout>

<style>
  .admin-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  h1 {
    color: #333;
    margin: 0;
  }

  .stats-card, .subscribers-card, .upload-card {
    background: white;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }

  .stats-card h2, .subscribers-card h2, .upload-card h2 {
    color: #333;
    margin-bottom: 1rem;
    border-bottom: 2px solid #007bff;
    padding-bottom: 0.5rem;
  }

  .stat {
    text-align: center;
    padding: 1rem;
  }

  .stat-number {
    display: block;
    font-size: 3rem;
    font-weight: bold;
    color: #007bff;
  }

  .stat-label {
    color: #666;
    font-size: 1.1rem;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
  }

  th, td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #333;
  }

  tr:hover {
    background-color: #f8f9fa;
  }

  .status-active {
    color: #28a745;
    font-weight: 600;
  }

  .status-unsubscribed {
    color: #dc3545;
    font-weight: 600;
  }

  .btn {
    padding: 0.25rem 0.75rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: background-color 0.2s;
  }

  .btn-danger {
    background: #dc3545;
    color: white;
  }

  .btn-danger:hover {
    background: #c82333;
  }

  .btn-secondary {
    background: #6c757d;
    color: white;
  }

  .btn-secondary:hover {
    background: #545b62;
  }

  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .error {
    color: #dc3545;
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 1rem;
    border-radius: 4px;
    margin-top: 1rem;
  }

  .hidden {
    display: none;
  }

  #loading {
    text-align: center;
    padding: 2rem;
    color: #666;
  }

  .pagination-info {
    margin-bottom: 1rem;
    color: #666;
    font-size: 0.9rem;
  }

  .pagination-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid #eee;
  }

  #page-info {
    font-weight: 600;
    color: #333;
    min-width: 100px;
    text-align: center;
  }

  .upload-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .file-upload {
    position: relative;
    border: 2px dashed #007bff;
    border-radius: 8px;
    padding: 2rem;
    text-align: center;
    transition: border-color 0.2s;
  }

  .file-upload:hover {
    border-color: #0056b3;
  }

  .file-upload.dragover {
    border-color: #0056b3;
    background-color: #f8f9fa;
  }

  #csv-file {
    position: absolute;
    opacity: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
  }

  .upload-label {
    cursor: pointer;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .upload-text {
    font-weight: 600;
    color: #007bff;
    font-size: 1.1rem;
  }

  .upload-hint {
    color: #666;
    font-size: 0.9rem;
  }

  .btn-primary {
    background: #007bff;
    color: white;
    align-self: flex-start;
  }

  .btn-primary:hover:not(:disabled) {
    background: #0056b3;
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background-color: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .progress-fill {
    height: 100%;
    background-color: #007bff;
    transition: width 0.3s ease;
    width: 0%;
  }

  #upload-status {
    color: #666;
    margin-bottom: 1rem;
  }

  .results-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .result-item {
    text-align: center;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .result-number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: #007bff;
  }

  .result-label {
    color: #666;
    font-size: 0.9rem;
  }

  .error-list {
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    padding: 1rem;
  }

  .error-list h4 {
    margin: 0 0 0.5rem 0;
    color: #721c24;
  }

  #error-items {
    margin: 0;
    padding-left: 1.5rem;
    color: #721c24;
  }

  @media (max-width: 768px) {
    .admin-container {
      padding: 0 0.5rem;
    }

    table {
      font-size: 0.875rem;
    }

    th, td {
      padding: 0.5rem;
    }
  }
</style>

<script>
  let currentPage = 1;
  let totalPages = 1;
  const itemsPerPage = 20;

  async function loadSubscriberCount() {
    try {
      const response = await fetch('/api/admin/subscribers?action=count');
      const data = await response.json();
      
      if (data.success) {
        document.getElementById('subscriber-count')!.textContent = data.count.toString();
      }
    } catch (error) {
      console.error('Failed to load subscriber count:', error);
    }
  }

  async function loadSubscribers(page = 1) {
    try {
      // Show loading state
      document.getElementById('loading')!.classList.remove('hidden');
      document.getElementById('subscribers-list')!.classList.add('hidden');
      document.getElementById('error')!.classList.add('hidden');

      const response = await fetch(`/api/admin/subscribers?action=list&page=${page}&limit=${itemsPerPage}`);
      const data = await response.json();
      
      if (data.success) {
        const tbody = document.getElementById('subscribers-tbody')!;
        tbody.innerHTML = '';
        
        data.subscribers.forEach((subscriber: any) => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${subscriber.email}</td>
            <td>${new Date(subscriber.subscribedAt).toLocaleDateString()}</td>
            <td><span class="status-${subscriber.status}">${subscriber.status}</span></td>
            <td>
              ${subscriber.status === 'active' ? 
                `<button class="btn btn-danger" onclick="unsubscribeUser('${subscriber.email}')">Unsubscribe</button>` : 
                '-'
              }
            </td>
          `;
          tbody.appendChild(row);
        });
        
        // Update pagination info
        currentPage = data.pagination.currentPage;
        totalPages = data.pagination.totalPages;
        updatePaginationControls(data.pagination);
        
        document.getElementById('loading')!.classList.add('hidden');
        document.getElementById('subscribers-list')!.classList.remove('hidden');
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      console.error('Failed to load subscribers:', error);
      document.getElementById('loading')!.classList.add('hidden');
      document.getElementById('error')!.textContent = 'Failed to load subscribers';
      document.getElementById('error')!.classList.remove('hidden');
    }
  }

  function updatePaginationControls(pagination: any) {
    const prevBtn = document.getElementById('prev-page') as HTMLButtonElement;
    const nextBtn = document.getElementById('next-page') as HTMLButtonElement;
    const pageInfo = document.getElementById('page-info')!;
    const paginationInfoText = document.getElementById('pagination-info-text')!;
    
    // Update button states
    prevBtn.disabled = !pagination.hasPrevious;
    nextBtn.disabled = !pagination.hasNext;
    
    // Update page info
    pageInfo.textContent = `Page ${pagination.currentPage} of ${pagination.totalPages}`;
    
    // Update pagination info text
    const startItem = ((pagination.currentPage - 1) * pagination.limit) + 1;
    const endItem = Math.min(pagination.currentPage * pagination.limit, pagination.totalCount);
    paginationInfoText.textContent = `Showing ${startItem}-${endItem} of ${pagination.totalCount} subscribers`;
  }

  function goToPage(page: number) {
    if (page >= 1 && page <= totalPages) {
      loadSubscribers(page);
    }
  }

  async function unsubscribeUser(email: string) {
    if (!confirm(`Are you sure you want to unsubscribe ${email}?`)) {
      return;
    }

    try {
      const formData = new FormData();
      formData.append('email', email);
      
      const response = await fetch('/api/admin/subscribers', {
        method: 'DELETE',
        body: formData
      });
      
      const data = await response.json();
      
      if (data.success) {
        alert('User unsubscribed successfully');
        loadSubscribers();
        loadSubscriberCount();
      } else {
        alert('Failed to unsubscribe: ' + data.message);
      }
    } catch (error) {
      console.error('Unsubscribe error:', error);
      alert('Failed to unsubscribe user');
    }
  }

  // Make function global for onclick handlers
  (window as any).unsubscribeUser = unsubscribeUser;

  // Logout functionality
  async function logout() {
    try {
      const response = await fetch('/api/admin/auth', {
        method: 'DELETE'
      });
      
      const data = await response.json();
      
      if (data.success) {
        window.location.reload();
      } else {
        alert('Logout failed');
      }
    } catch (error) {
      console.error('Logout error:', error);
      alert('Logout failed');
    }
  }

  // Bulk upload functionality
  let selectedFile: File | null = null;

  function setupFileUpload() {
    const fileInput = document.getElementById('csv-file') as HTMLInputElement;
    const uploadBtn = document.getElementById('upload-btn') as HTMLButtonElement;
    const fileUpload = document.querySelector('.file-upload') as HTMLElement;
    const uploadText = document.querySelector('.upload-text') as HTMLElement;

    fileInput.addEventListener('change', (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file && file.type === 'text/csv') {
        selectedFile = file;
        uploadText.textContent = `Selected: ${file.name}`;
        uploadBtn.disabled = false;
      } else {
        selectedFile = null;
        uploadText.textContent = 'Choose CSV file or drag & drop';
        uploadBtn.disabled = true;
        if (file) {
          alert('Please select a CSV file');
        }
      }
    });

    // Drag and drop functionality
    fileUpload.addEventListener('dragover', (e) => {
      e.preventDefault();
      fileUpload.classList.add('dragover');
    });

    fileUpload.addEventListener('dragleave', () => {
      fileUpload.classList.remove('dragover');
    });

    fileUpload.addEventListener('drop', (e) => {
      e.preventDefault();
      fileUpload.classList.remove('dragover');
      
      const file = e.dataTransfer?.files[0];
      if (file && file.type === 'text/csv') {
        selectedFile = file;
        uploadText.textContent = `Selected: ${file.name}`;
        uploadBtn.disabled = false;
        fileInput.files = e.dataTransfer.files;
      } else {
        alert('Please drop a CSV file');
      }
    });

    uploadBtn.addEventListener('click', uploadCSV);
  }

  async function uploadCSV() {
    if (!selectedFile) return;

    const progressDiv = document.getElementById('upload-progress')!;
    const resultsDiv = document.getElementById('upload-results')!;
    const progressFill = document.getElementById('progress-fill')!;
    const status = document.getElementById('upload-status')!;
    const uploadBtn = document.getElementById('upload-btn') as HTMLButtonElement;

    // Show progress
    progressDiv.classList.remove('hidden');
    resultsDiv.classList.add('hidden');
    uploadBtn.disabled = true;
    progressFill.style.width = '10%';
    status.textContent = 'Reading file...';

    try {
      const csvContent = await selectedFile.text();
      progressFill.style.width = '30%';
      status.textContent = 'Uploading subscribers...';

      const formData = new FormData();
      formData.append('csv', csvContent);

      const response = await fetch('/api/admin/subscribers', {
        method: 'POST',
        body: formData
      });

      progressFill.style.width = '100%';
      status.textContent = 'Processing complete';

      const data = await response.json();

      if (data.success) {
        // Update counts
        document.getElementById('added-count')!.textContent = data.results.added.toString();
        document.getElementById('skipped-count')!.textContent = data.results.skipped.toString();
        document.getElementById('invalid-count')!.textContent = data.results.invalid.toString();

        // Show errors if any
        const errorList = document.getElementById('error-list')!;
        const errorItems = document.getElementById('error-items')!;
        
        if (data.results.errors && data.results.errors.length > 0) {
          errorItems.innerHTML = '';
          data.results.errors.forEach((error: string) => {
            const li = document.createElement('li');
            li.textContent = error;
            errorItems.appendChild(li);
          });
          errorList.classList.remove('hidden');
        } else {
          errorList.classList.add('hidden');
        }

        // Show results
        progressDiv.classList.add('hidden');
        resultsDiv.classList.remove('hidden');

        // Refresh subscriber list and count
        loadSubscriberCount();
        loadSubscribers();

        // Reset form
        const fileInput = document.getElementById('csv-file') as HTMLInputElement;
        fileInput.value = '';
        selectedFile = null;
        document.querySelector('.upload-text')!.textContent = 'Choose CSV file or drag & drop';

      } else {
        throw new Error(data.message);
      }

    } catch (error) {
      console.error('Upload error:', error);
      progressDiv.classList.add('hidden');
      alert('Upload failed. Please try again.');
    } finally {
      uploadBtn.disabled = false;
    }
  }

  // Make functions global
  (window as any).uploadCSV = uploadCSV;
  (window as any).logout = logout;

  // Add logout button event listener
  document.addEventListener('DOMContentLoaded', () => {
    const logoutBtn = document.getElementById('logout-btn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', logout);
    }
    
    // Add pagination button event listeners
    const prevBtn = document.getElementById('prev-page');
    const nextBtn = document.getElementById('next-page');
    
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        goToPage(currentPage - 1);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        goToPage(currentPage + 1);
      });
    }
    
    // Only load data if authenticated (admin panel is visible)
    if (document.querySelector('.admin-container')) {
      loadSubscriberCount();
      loadSubscribers();
      setupFileUpload();
    }
  });
</script>